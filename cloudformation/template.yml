---
# yamllint disable rule:line-length
AWSTemplateFormatVersion: "2010-09-09"
Description: "Buildkite Notifications to MS Teams"

Parameters:
  BuildKiteEventSourceName:
    Type: String
  TeamsWebHookUrl:
    Type: String

Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Description: String
      EventSourceName: !Ref BuildKiteEventSourceName
      Name: !Ref BuildKiteEventSourceName

  LogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/eventbus/${AWS::StackName}"
      RetentionInDays: 60

  EventRuleCloudWatch:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Collect all for Buildkite Events"
      EventBusName: !Ref BuildKiteEventSourceName
      EventPattern: !Sub '{"account": ["${AWS::AccountId}"]}'
      State: "ENABLED"
      Targets:
        - Id: 'CloudwatchLogsTarget'
          Arn: !GetAtt LogGroup.Arn

  EventRuleLambda:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Collect all for Buildkite Events"
      EventBusName: !Ref BuildKiteEventSourceName
      EventPattern: !Sub '{"account": ["${AWS::AccountId}"],"detail-type": ["Build Finished"]}'
      State: "ENABLED"
      Targets:
        - Id: "MSTeamsLambda"
          Arn: !GetAtt LambdaFunct.Arn

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      RoleName: !Sub "${AWS::StackName}-role-${AWS::Region}"

  Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref Role
      PolicyName: !Sub "${AWS::StackName}-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt LogGroup.Arn

  LambdaFunct:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: ../function-msteams/
      Description: "MS Teams WebHook notification"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.9
      Timeout: 20
      Environment:
        Variables:
          HookUrl: !Ref TeamsWebHookUrl

  PermissionsInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunct
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleLambda.Arn

  LogGroupForEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-event"
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com",
                  "delivery.logs.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroup.Arn}"
              ]
            }
          ]
        }
